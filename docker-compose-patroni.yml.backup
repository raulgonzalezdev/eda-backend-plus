version: '3.8'

services:
  # etcd Cluster para consenso distribuido
  etcd1:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: etcd1
    environment:
      ETCD_NAME: etcd1
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd1:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd1:2380
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster-token
    volumes:
      - etcd1_data:/etcd-data
    networks:
      - patroni-network
    ports:
      - "2379:2379"
      - "2380:2380"

  etcd2:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: etcd2
    environment:
      ETCD_NAME: etcd2
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd2:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd2:2380
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster-token
    volumes:
      - etcd2_data:/etcd-data
    networks:
      - patroni-network

  etcd3:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: etcd3
    environment:
      ETCD_NAME: etcd3
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd3:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd3:2380
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster-token
    volumes:
      - etcd3_data:/etcd-data
    networks:
      - patroni-network

  # Patroni Master (postgres-local)
  patroni-master:
    build:
      context: .
      dockerfile: Dockerfile.patroni
    container_name: patroni-master
    hostname: patroni-master
    env_file:
      - .env
    environment:
      PATRONI_NAME: patroni-master
      PATRONI_NAMESPACE: /db/
      PATRONI_SCOPE: postgres-cluster
      
      # etcd configuration
      PATRONI_ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      
      # PostgreSQL configuration
      PATRONI_POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      PATRONI_POSTGRESQL_PGPASS: /tmp/pgpass
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: patroni-master:5432
      
      # Superuser credentials
      PATRONI_SUPERUSER_USERNAME: postgres
      PATRONI_SUPERUSER_PASSWORD: postgres_super_pass
      
      # Replication user
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: repl_pass_2024
      
      # Application database
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Patroni REST API
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: patroni-master:8008
      
    volumes:
      - patroni_master_data:/var/lib/postgresql/data
      - ./patroni-config:/etc/patroni
    networks:
      - patroni-network
    ports:
      - "5435:5432"  # Puerto diferente para evitar conflicto
      - "8008:8008"   # Puerto de API de Patroni
    depends_on:
      - etcd1
      - etcd2
      - etcd3

  # Patroni Replica 1 (postgres-backup)
  patroni-replica1:
    build:
      context: .
      dockerfile: Dockerfile.patroni
    container_name: patroni-replica1
    hostname: patroni-replica1
    env_file:
      - .env
    environment:
      PATRONI_NAME: patroni-replica1
      PATRONI_NAMESPACE: /db/
      PATRONI_SCOPE: postgres-cluster
      
      # etcd configuration
      PATRONI_ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      
      # PostgreSQL configuration
      PATRONI_POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      PATRONI_POSTGRESQL_PGPASS: /tmp/pgpass
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: patroni-replica1:5432
      
      # Superuser credentials
      PATRONI_SUPERUSER_USERNAME: postgres
      PATRONI_SUPERUSER_PASSWORD: postgres_super_pass
      
      # Replication user
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: repl_pass_2024
      
      # Application database
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Patroni REST API
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: patroni-replica1:8008
      
    volumes:
      - patroni_replica1_data:/var/lib/postgresql/data
      - ./patroni-config:/etc/patroni
    networks:
      - patroni-network
    ports:
      - "5436:5432"  # Puerto diferente para réplica 1
      - "8009:8008"   # Puerto de API de Patroni
    depends_on:
      - etcd1
      - etcd2
      - etcd3

  # Patroni Replica 2 (postgres-read)
  patroni-replica2:
    build:
      context: .
      dockerfile: Dockerfile.patroni
    container_name: patroni-replica2
    hostname: patroni-replica2
    env_file:
      - .env
    environment:
      PATRONI_NAME: patroni-replica2
      PATRONI_NAMESPACE: /db/
      PATRONI_SCOPE: postgres-cluster
      
      # etcd configuration
      PATRONI_ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      
      # PostgreSQL configuration
      PATRONI_POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      PATRONI_POSTGRESQL_PGPASS: /tmp/pgpass
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: patroni-replica2:5432
      
      # Superuser credentials
      PATRONI_SUPERUSER_USERNAME: postgres
      PATRONI_SUPERUSER_PASSWORD: postgres_super_pass
      
      # Replication user
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: repl_pass_2024
      
      # Application database
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Patroni REST API
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: patroni-replica2:8008
      
    volumes:
      - patroni_replica2_data:/var/lib/postgresql/data
      - ./patroni-config:/etc/patroni
    networks:
      - patroni-network
    ports:
      - "5437:5432"  # Puerto diferente para réplica 2
      - "8010:8008"   # Puerto de API de Patroni
    depends_on:
      - etcd1
      - etcd2
      - etcd3

  # HAProxy para load balancing
  haproxy:
    image: haproxy:2.8
    container_name: haproxy-patroni
    volumes:
      - ./haproxy-patroni.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - patroni-network
    ports:
      - "5000:5000"  # Master (write)
      - "5001:5001"  # Replicas (read)
      - "7000:7000"  # HAProxy stats
    depends_on:
      - patroni-master
      - patroni-replica1
      - patroni-replica2

  # Aplicaciones EDA Backend
  app1-patroni:
    build: .
    container_name: eda-backend-app1-patroni
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET}
      - ALERT_THRESHOLD=10000
      - DB_HOST=haproxy-patroni
      - DB_PORT=5000
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - INSTANCE_ID=app1-patroni
    ports:
      - "9084:8080"  # Puerto diferente para app1-patroni
    networks:
      - patroni-network
      - kafka-network
    depends_on:
      - haproxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app2-patroni:
    build: .
    container_name: eda-backend-app2-patroni
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET}
      - ALERT_THRESHOLD=10000
      - DB_HOST=haproxy-patroni
      - DB_PORT=5000
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - INSTANCE_ID=app2-patroni
    ports:
      - "9085:8080"  # Puerto diferente para app2-patroni
    networks:
      - patroni-network
      - kafka-network
    depends_on:
      - haproxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app3-patroni:
    build: .
    container_name: eda-backend-app3-patroni
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET}
      - ALERT_THRESHOLD=10000
      - DB_HOST=haproxy-patroni
      - DB_PORT=5000
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - INSTANCE_ID=app3-patroni
    ports:
      - "9086:8080"  # Puerto diferente para app3-patroni
    networks:
      - patroni-network
      - kafka-network
    depends_on:
      - haproxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  etcd1_data:
  etcd2_data:
  etcd3_data:
  patroni_master_data:
  patroni_replica1_data:
  patroni_replica2_data:

networks:
  patroni-network:
    driver: bridge
  kafka-network:
    external: true
    name: eda-backend-plus_kafka-network