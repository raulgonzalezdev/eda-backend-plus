Param(
    [Parameter(Mandatory = $true)][string]$Description,
    [string]$EntitiesPackage = "com.rgq.edabank",
    [string]$OutputDir = "src/main/resources/db/migration",
    [string]$DefaultSchema = "pos",
    [switch]$NoDocker
)

$ErrorActionPreference = 'Stop'

$repoRoot = (Resolve-Path (Join-Path $PSScriptRoot '..')).Path
$liquibaseWorkDir = Join-Path $repoRoot 'target/liquibase'
if (-not (Test-Path -Path $liquibaseWorkDir)) { New-Item -ItemType Directory -Path $liquibaseWorkDir -Force | Out-Null }

# Cargar variables desde .env si existe
$envPath = Join-Path $repoRoot '.env'
$envVars = @{}
if (Test-Path -Path $envPath) {
    Get-Content -Path $envPath | ForEach-Object {
        if ($_ -match '^(?<k>[A-Za-z0-9_]+)=(?<v>.*)$') {
            $envVars[$Matches['k']] = $Matches['v']
        }
    }
}

$dbHost = $envVars['DB_HOST']; if (-not $dbHost -or $dbHost -eq '') { $dbHost = 'patroni-master' }
$dbPort = $envVars['DB_PORT']; if (-not $dbPort -or $dbPort -eq '') { $dbPort = '5432' }
$dbName = $envVars['DB_NAME']; if (-not $dbName -or $dbName -eq '') { $dbName = 'sasdatqbox' }
$dbUser = $envVars['DB_USER']; if (-not $dbUser -or $dbUser -eq '') { $dbUser = 'sas_user' }
$dbPassword = $envVars['DB_PASSWORD']; if (-not $dbPassword -or $dbPassword -eq '') { $dbPassword = '' }

$jdbcUrl = "jdbc:postgresql://$dbHost:$dbPort/$dbName"
$changeLogYaml = Join-Path $liquibaseWorkDir 'generated-changelog.yaml'
$generatedSql = Join-Path $liquibaseWorkDir 'generated.sql'

function Run-Maven([string]$Args) {
    if ($NoDocker) {
        & mvn -q -DskipTests $Args
    } else {
        $pwd = (Resolve-Path $repoRoot).Path
        docker run --rm -v "$pwd:/workspace" -w /workspace maven:3-eclipse-temurin-17 mvn -q -DskipTests $Args
    }
}

Write-Host "Generando changelog YAML con Liquibase (diff JPA vs DB)..." -ForegroundColor Cyan
Run-Maven "liquibase:diffChangeLog `
    -Dliquibase.referenceUrl=\"hibernate:spring:$EntitiesPackage?dialect=org.hibernate.dialect.PostgreSQLDialect\" `
    -Dliquibase.url=\"$jdbcUrl\" `
    -Dliquibase.username=\"$dbUser\" `
    -Dliquibase.password=\"$dbPassword\" `
    -Dliquibase.defaultSchemaName=\"$DefaultSchema\" `
    -Dliquibase.changeLogFile=\"$changeLogYaml\""

Write-Host "Renderizando SQL listo para Flyway..." -ForegroundColor Cyan
Run-Maven "liquibase:updateSQL `
    -Dliquibase.changeLogFile=\"$changeLogYaml\" `
    -Dliquibase.outputFile=\"$generatedSql\" `
    -Dliquibase.defaultSchemaName=\"$DefaultSchema\""

if (-not (Test-Path -Path $generatedSql)) {
    throw "No se generó el archivo SQL esperado: $generatedSql"
}

# Crear archivo de migración con nombre correcto
$newScript = Join-Path $PSScriptRoot 'new-migration.ps1'
$migrationPath = & $newScript -Description $Description -Dir $OutputDir

$timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss zzz'
$header = @(
    "-- Generated by Liquibase on $timestamp",
    "-- Source: JPA ($EntitiesPackage) vs DB ($jdbcUrl)",
    "-- Default schema: $DefaultSchema",
    ""
) -join [Environment]::NewLine

$content = Get-Content -Path $generatedSql -Raw
Set-Content -Path $migrationPath -Value ($header + $content) -Encoding UTF8

Write-Host "Listo: $migrationPath" -ForegroundColor Green
return $migrationPath