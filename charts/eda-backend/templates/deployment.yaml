apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "eda-backend.fullname" . }}
  labels:
    {{- include "eda-backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "eda-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
      labels:
        {{- include "eda-backend.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "{{ .Values.env.kafkaBootstrapServers }}"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "eda-backend.fullname" . }}-secret
                  key: JWT_SECRET
            - name: ALERT_THRESHOLD
              value: "{{ .Values.env.alertThreshold }}"
            - name: KAFKA_STREAMS_APPLICATION_ID
              value: "{{ .Values.env.kafkaStreamsAppId }}"
          readinessProbe:
            httpGet: { path: /actuator/health, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /actuator/health, port: 8080 }
            initialDelaySeconds: 30
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
