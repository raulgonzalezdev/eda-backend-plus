events {
    worker_connections 1024;
}

http {
    # Configuración básica
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    # Resolver DNS interno de Docker para re-resolver upstreams sin reiniciar NGINX
    resolver 127.0.0.11 ipv6=off valid=30s;
    resolver_timeout 5s;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr response_time: $upstream_response_time';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Configuración de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Configuración del upstream (pool de servidores backend)
    upstream eda_backend {
        zone eda_backend_zone 64k;
        # Estrategia de balanceo: least_conn (menos conexiones activas)
        least_conn;
        
        # Servidores backend con health checks
        server app1:8080 resolve max_fails=3 fail_timeout=30s weight=1;
        server app2:8080 resolve max_fails=3 fail_timeout=30s weight=1;
        server app3:8080 resolve max_fails=3 fail_timeout=30s weight=1;
        
        # Configuración de keepalive para mejor performance
        keepalive 32;
    }
    
    # Configuración del servidor principal
    server {
        listen 80;
        listen 8080;  # Puerto interno de NGINX
        server_name localhost;
        
        # Headers para el proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Configuración de timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Configuración de buffers
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Endpoint específico para health check de las aplicaciones
        location /api/health {
            proxy_pass http://eda_backend;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            # Header de depuración para saber qué instancia respondió
            add_header X-Upstream-Server $upstream_addr always;
        }
        
        # Proxy para todas las rutas de la API
        location / {
            proxy_pass http://eda_backend;
            
            # Configuración de failover
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Headers adicionales para debugging
            add_header X-Upstream-Server $upstream_addr always;
            add_header X-Response-Time $upstream_response_time always;
        }
        
        # Página de status de NGINX
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;  # Rango de Docker
            deny all;
        }
        
        # Manejo de errores
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # Servidor adicional para métricas y monitoreo
    server {
        listen 8090;
        server_name localhost;
        
        location /metrics {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;  # Rango de Docker
            deny all;
        }
        
        location /upstream-status {
            return 200 "Upstream servers status check\n";
            add_header Content-Type text/plain;
        }
    }
}