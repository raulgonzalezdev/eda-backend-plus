services:
  connect-setup:
    image: confluentinc/cp-kafkacat:latest
    depends_on:
      - debezium
    networks:
      - kafka-network
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for Kafka Connect to start..."
        while [ `curl -s -o /dev/null -w %{http_code} http://debezium:8083/connectors` -ne 200 ]; do
          echo "Kafka Connect is not ready yet, waiting..."
          sleep 5
        done
        echo "Kafka Connect is ready, creating connector..."
        curl -X POST -H "Content-Type: application/json" --data @/config/debezium-connector.json http://debezium:8083/connectors
    volumes:
      - ./config:/config

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  postgres:
    image: pgvector/pgvector:pg15
    container_name: postgres-local
    environment:
      POSTGRES_DB: sasdatqbox
      POSTGRES_USER: sas_user
      POSTGRES_PASSWORD: ML!gsx90l02
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - kafka-network
    command: postgres -c wal_level=logical

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data_1:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data_2:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9094,PLAINTEXT_HOST://localhost:29094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094,PLAINTEXT_HOST://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data_3:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka
      - kafka2
      - kafka3
    networks:
      - kafka-network
    command: >
      bash -c "
        echo 'Waiting for Kafka cluster to be ready...'
        sleep 90
        echo 'Creating Kafka topics...'
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --create --if-not-exists --topic payments.events --partitions 1 --replication-factor 1 || true
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --create --if-not-exists --topic transfers.events --partitions 1 --replication-factor 1 || true
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --create --if-not-exists --topic alerts.suspect --partitions 1 --replication-factor 1 || true
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --create --if-not-exists --topic debezium_config --partitions 1 --replication-factor 1 --config cleanup.policy=compact || true
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --create --if-not-exists --topic debezium_offsets --partitions 1 --replication-factor 1 --config cleanup.policy=compact || true
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --create --if-not-exists --topic debezium_status --partitions 1 --replication-factor 1 --config cleanup.policy=compact || true
        echo 'Topics created successfully!'
        echo 'Listing all topics:'
        kafka-topics --bootstrap-server kafka:9092,kafka2:9093,kafka3:9094 --list || true
        echo 'Topic creation completed. Container will exit.'
      "
    restart: "no"

  app:
    build: .
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - postgres
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092,kafka2:9093,kafka3:9094
      - JWT_SECRET=${JWT_SECRET}
      - ALERT_THRESHOLD=10000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=sasdatqbox
      - DB_USER=sas_user
      - DB_PASSWORD=ML!gsx90l02
    ports:
      - "8080:8080"
    networks:
      - kafka-network

  debezium:
    image: debezium/connect:2.5
    container_name: debezium
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_status
      CONNECT_LOG4J_ROOT_LOGLEVEL: DEBUG
    networks:
      - kafka-network
    volumes:
      - ./config:/config

  debezium-connector-setup:
    image: confluentinc/cp-kafkacat:latest
    container_name: debezium-connector-setup
    depends_on:
      - debezium
    networks:
      - kafka-network
    command: >
      bash -c '
        echo "Waiting for Debezium Connect to start..."
        while ! curl -s -f -o /dev/null http://debezium:8083/; do
          echo "Debezium Connect is not ready yet, waiting..."
          sleep 5
        done
        echo "Debezium Connect is ready, registering connector..."
        curl -X POST -H "Content-Type: application/json" --data @/config/debezium-connector.json http://debezium:8083/connectors
      '
    volumes:
      - ./config:/config
    restart: "no"

volumes:
  kafka_data_1: {}
  kafka_data_2: {}
  kafka_data_3: {}
  postgres_data: {}

networks:
  kafka-network:
    driver: bridge
